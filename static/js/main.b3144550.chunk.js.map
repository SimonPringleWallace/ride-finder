{"version":3,"sources":["apis.js","handlers.js","hero.js","bikeLocation.js","index.js"],"names":["bikeInfo","network","_this","this","fetch","concat","then","response","json","stations","length","setState","catch","error","errorState","networkList","_this2","countries","desiredKey","totalResults","networks","map","location","sort","Array","from","Set","getLocationSpecifics","activeCountry","getCountryCities","_getCountryCities","Object","asyncToGenerator","regenerator_default","a","mark","_callee","e","wrap","_context","prev","next","target","value","displayNetworkName","bikeLocationToggle","filterCities","filterNetworks","stop","_x","apply","arguments","getCityNetworks","_getCityNetworks","_callee2","_context2","activeCity","_x2","setNetwork","activeNetwork","Hero","_ref","createDropdownOptions","getBikeInfo","react_default","createElement","className","href","onChange","onSubmit","BikeLocation","name","free_bikes","empty_slots","timestamp","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","filteredCities","state","filter","country","city","cityList","networkOptions","preventDefault","filteredNetworks","id","join","stateKey","key","createStationContainers","bikeLocation_BikeLocation","station","bind","assertThisInitialized","Fragment","hero_Hero","React","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.b3144550.chunk.js","sourcesContent":["\n// acquire info about a specific network\nexport const bikeInfo = function bikeInfo(network) {\n  fetch(`https://api.citybik.es/v2/networks/${network}`, {})\n    .then(response => response.json())\n    .then(response => {\n// if there are stations withing this network save that station list in state\n// otherwise throw no stations error\n      response.network.stations.length > 0\n        ? this.setState({ stations: response.network.stations })\n        : this.setState({ stations: null });\n    })\n    .catch(error => {\n      this.setState({errorState: true});\n    });\n};\n\n// not an API call, but provides greater specificity for networkList API\n// call below\nconst getLocationSpecifics = (response, desiredKey) => {\n  const totalResults = response.networks\n    .map(network => network.location[desiredKey])\n    .sort();\n  const uniqueResults = Array.from(new Set(totalResults));\n  return uniqueResults;\n};\n\n// access all all of the networks within the API on componentDidMount\n// and save them in state to be processed by the user\nexport const networkList = function networkList() {\n  fetch(\"https://api.citybik.es/v2/networks?fields=name,location,id\", {})\n    .then(response => response.json())\n    .then(response =>{\n      const countries = getLocationSpecifics(response, 'country')\n      this.setState({\n        countries: countries,\n        activeCountry: countries[0],\n        networks: response.networks\n      })\n    })\n    .catch(error => {\n      this.setState({errorState: true});\n    });\n};\n","export const getCountryCities = async function getCountryCities(e) {\n  await this.setState({ activeCountry: e.target.value,\n                        displayNetworkName: '',\n                         bikeLocationToggle: false });\n  await this.filterCities();\n  this.filterNetworks()\n};\n\nexport const getCityNetworks = async function getCityNetworks(e) {\n  await this.setState({ activeCity: e.target.value,\n                        displayNetworkName: '',\n                        bikeLocationToggle: false });\n  await this.filterNetworks()\n};\n\nexport const setNetwork = function setNetwork(e) {\n  this.setState({ activeNetwork: e.target.value,\n                  displayNetworkName: '',\n                  bikeLocationToggle: false });\n}\n","import React from 'react'\nimport './Hero.css'\n\n\nexport const Hero = ({getCountryCities, getCityNetworks, setNetwork, createDropdownOptions, getBikeInfo}) => (\n\n<div className='hero'>\n  <h2>Ride Finder</h2>\n  <h6>Powered by the <a href='https://api.citybik.es/v2/'> CityBik API</a></h6>\n    <div className='selections'>\n         <label>Country:</label>\n         <select onChange={getCountryCities}>\n            {createDropdownOptions('countries', 'country')}\n         </select>\n\n          <label>City:</label>\n          <select onChange={getCityNetworks}>\n            {createDropdownOptions('cityList', 'city')}\n          </select>\n\n          <label>Network:</label>\n          <select onChange={setNetwork}>\n            {createDropdownOptions('networkOptions', 'network')}\n          </select>\n      </div>\n    <form onSubmit={getBikeInfo}><button>Find Bikes</button></form>\n  </div>\n)\n","import React from \"react\";\nimport \"./bike-location.css\";\n\n//Display information about specific bike stations\nexport const BikeLocation = ({ name, free_bikes, empty_slots, timestamp }) => {\n  return (\n    <div className=\"location-flex\">\n      <p className=\"header\">{name}</p>\n      <div className=\"bike-stats\">\n        <div className=\"free-bikes\">\n          <h2>{free_bikes}</h2>\n          <p>Free Bikes</p>\n        </div>\n        <div className=\"Empty Slots\">\n          <h2>{empty_slots}</h2>\n          <p>Empty Slots</p>\n        </div>\n      </div>\n      <p className=\"footer\">{timestamp}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from 'react-dom'\nimport { bikeInfo, networkList } from \"./apis.js\";\nimport {getCountryCities, getCityNetworks, setNetwork} from './handlers.js';\nimport { Hero } from './hero.js'\nimport { BikeLocation } from \"./bikeLocation\";\nimport './index.css'\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      // the total networks coming back from the citybik(filled on componentDidMount)\n      networks: [],\n      // the total countries coming back from the citybik(filled on componentDidMount)\n      countries: [],\n      // stations at any given city-country-network filled from bikeInfo()\n      stations: [],\n      // set on user select of country - getCountryCities()\n      activeCountry: \"\",\n      cityList: [\"Abu Dhabi\", \"Al Ain\", \"Dubai\"],\n      // set on user select of country - getCountryCities() or getCityNetworks()\n      activeCity: \"Abu Dhabi\",\n      activeNetwork:\"ADCB Bikeshare\",\n      networkOptions:['ADCB Bikeshare'],\n      displayNetworkName:'',\n      bikeLocationToggle: false,\n      errorState: false\n    };\n    // GET information about number of bikes and slots at various stations\n    this.bikeInfo = bikeInfo.bind(this);\n    // GET the list of all of the networks (bike share providers) in the citybik\n    this.networkList = networkList.bind(this);\n    // set activeCountry the cities for a selected country\n    this.getCountryCities = getCountryCities.bind(this);\n    // set activeNetwork all the networks for a selected city\n    this.getCityNetworks = getCityNetworks.bind(this);\n    // set an active network after it is selected by a user\n    this.setNetwork = setNetwork.bind(this);\n  }\n\n  componentDidMount = () => {\n    //first request to API to get all the network data the user will need for\n    //the rest of their session\n    this.networkList();\n  };\n\n  // filter the cities for a selected country\n  filterCities = () => {\n    let filteredCities = this.state.networks\n      .filter(network => network.location.country === this.state.activeCountry)\n      .map(network => network.location.city)\n      .sort();\n      filteredCities = Array.from(new Set(filteredCities))\n    this.setState({ cityList: filteredCities, activeCity: filteredCities[0] });\n  };\n//filter the networks for a selected city\nfilterNetworks = () => {\n  const networkOptions = this.state.networks\n  .filter(network => network.location.city === this.state.activeCity)\n  .map(network => network.name)\n  .sort()\n  this.setState({networkOptions: networkOptions, activeNetwork: networkOptions[0]})\n}\n\n  getBikeInfo = (e) => {\n    e.preventDefault()\n    this.setState({displayNetworkName: this.state.activeNetwork,\n                   bikeLocationToggle: true })\n    const filteredNetworks = this.state.networks\n      .filter(network => network.name === this.state.activeNetwork)\n      .filter(network => network.location.city === this.state.activeCity)\n      .map(network => network.id)\n      .join();\n    this.bikeInfo(filteredNetworks);\n  };\n\n  createDropdownOptions = (stateKey, value) => (\n    this.state[stateKey].map(value => {\n      return <option key={value}>{value}</option>\n    })\n  )\n\n  createStationContainers = () => {\n    if(this.state.errorState){\n      return <BikeLocation name={\"An Error Occured\"} />;\n    }\n    else if (this.state.stations === null) {\n      return <BikeLocation name={\"No Stations Found\"} />;\n    }else if (this.state.bikeLocationToggle){\n      return this.state.stations.map(station => (\n        <BikeLocation\n          key={station.id}\n          name={station.name}\n          free_bikes={station.free_bikes}\n          empty_slots={station.empty_slots}\n          timestamp={station.timestamp}\n        />\n      ))\n    }else{\n      return <div></div>\n    }\n  }\n\n  render() {\n\n    return (\n    <React.Fragment>\n      <Hero\n      getCountryCities={this.getCountryCities.bind(this)}\n      getCityNetworks={this.getCityNetworks}\n      setNetwork={this.setNetwork}\n      createDropdownOptions={this.createDropdownOptions.bind(this)}\n      getBikeInfo={this.getBikeInfo.bind(this)}\n      />\n      <h4>Bicycle Network: {this.state.displayNetworkName}</h4>\n        {this.createStationContainers()}\n    </React.Fragment>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}